# bot/handlers/lectures.py
import os
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ContextTypes, CommandHandler, MessageHandler, filters
from ..db import get_db_session, lectures
from ..services.drive_service import download_file_from_drive


# ------------------------
# –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ–º
async def show_topics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    session = get_db_session()
    topics = session.query(lectures.c.topic).distinct().all()
    session.close()

    keyboard = [[t[0]] for t in topics]
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )


# ------------------------
# –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ª–µ–∫—Ü–∏–π –ø–æ —Ç–µ–º–µ
async def show_lectures(update: Update, context: ContextTypes.DEFAULT_TYPE):
    topic_name = update.message.text

    session = get_db_session()
    lectures_list = session.query(lectures).filter(lectures.c.topic == topic_name).all()
    session.close()

    if not lectures_list:
        await update.message.reply_text("–õ–µ–∫—Ü–∏–π –ø–æ —ç—Ç–æ–π —Ç–µ–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    keyboard = [[lec.name] for lec in lectures_list]
    context.user_data["current_topic"] = topic_name

    await update.message.reply_text(
        f"–õ–µ–∫—Ü–∏–∏ –ø–æ —Ç–µ–º–µ '{topic_name}':",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )


# ------------------------
# –ø–æ–∫–∞–∑–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ª–µ–∫—Ü–∏–∏
async def show_lecture_materials(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lecture_name = update.message.text

    session = get_db_session()
    lec = session.query(lectures).filter(lectures.c.name == lecture_name).first()
    session.close()

    if not lec:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ª–µ–∫—Ü–∏—é.")
        return

    context.user_data["current_lecture"] = lec.id

    keyboard = [["üéß –ê—É–¥–∏–æ–∑–∞–ø–∏—Å—å"], ["üìÑ –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è"], ["üìù –ö–æ–Ω—Å–ø–µ–∫—Ç"]]

    await update.message.reply_text(
        f"–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –ª–µ–∫—Ü–∏–∏ '{lec.name}':",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )


# ------------------------
# –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –∏–ª–∏ –∫–æ–Ω—Å–ø–µ–∫—Ç–∞
async def send_material(update: Update, context: ContextTypes.DEFAULT_TYPE):
    choice = update.message.text
    lecture_id = context.user_data.get("current_lecture")

    if not lecture_id:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ª–µ–∫—Ü–∏—é.")
        return

    session = get_db_session()
    lec = session.query(lectures).filter(lectures.c.id == lecture_id).first()
    session.close()

    if choice == "üéß –ê—É–¥–∏–æ–∑–∞–ø–∏—Å—å" and lec.drive_audio_id:
        path = download_file_from_drive(lec.drive_audio_id, lec.name, "audio")
        if path:
            await update.message.reply_audio(open(path, "rb"))
            os.remove(path)
        else:
            await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∞—É–¥–∏–æ.")

    elif choice == "üìÑ –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è" and lec.drive_slides_id:
        path = download_file_from_drive(lec.drive_slides_id, lec.name, "slides")
        if path:
            await update.message.reply_document(open(path, "rb"))
            os.remove(path)
        else:
            await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏.")

    elif choice == "üìù –ö–æ–Ω—Å–ø–µ–∫—Ç" and lec.summary_text:
        await update.message.reply_text(f"–ö–æ–Ω—Å–ø–µ–∫—Ç:\n\n{lec.summary_text}")
    else:
        await update.message.reply_text("–ú–∞—Ç–µ—Ä–∏–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")


# ------------------------
# —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
def register_handlers(app):
    app.add_handler(CommandHandler("lectures", show_topics))
    app.add_handler(MessageHandler(filters.Regex("^(?!/).*"), show_lectures))
    app.add_handler(MessageHandler(filters.Regex("^(?!/).*"), show_lecture_materials))
    app.add_handler(MessageHandler(filters.Regex("^(üéß –ê—É–¥–∏–æ–∑–∞–ø–∏—Å—å|üìÑ –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è|üìù –ö–æ–Ω—Å–ø–µ–∫—Ç)$"), send_material))