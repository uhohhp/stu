# bot/handlers/audio.py
import os
import logging
import speech_recognition as sr
from pydub import AudioSegment
from telegram import Update
from telegram.ext import ContextTypes, ConversationHandler

logger = logging.getLogger(__name__)

WAITING_AUDIO = 1

# ================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï ==================

def ogg2wav(filename: str) -> str:
    """
    –ü–µ—Ä–µ–≤–æ–¥ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ ogg –≤ wav
    """
    logger.info(f"[AUDIO] –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è {filename} -> wav")
    new_filename = filename.replace('.ogg', '.wav')
    audio = AudioSegment.from_file(filename)
    audio.export(new_filename, format="wav")
    return new_filename


def recognize_speech(wav_filename: str) -> str:
    """
    –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ —á–µ—Ä–µ–∑ Google Speech Recognition
    """
    logger.info(f"[AUDIO] –†–∞—Å–ø–æ–∑–Ω–∞—ë–º —Ä–µ—á—å –∏–∑ {wav_filename}")
    recognizer = sr.Recognizer()
    with sr.AudioFile(wav_filename) as source:
        wav_audio = recognizer.record(source)

    text = recognizer.recognize_google(wav_audio, language="ru")
    logger.info(f"[AUDIO] –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {text[:50]}...")
    return text

# ================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ==================

async def cmd_make_summary(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("[AUDIO] cmd_make_summary –≤—ã–∑–≤–∞–Ω")
    await update.message.reply_text(
        "–û—Ç–ø—Ä–∞–≤—å –∞—É–¥–∏–æ –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è —Å–¥–µ–ª–∞—é –∫—Ä–∞—Ç–∫–∏–π –∫–æ–Ω—Å–ø–µ–∫—Ç üé§"
    )
    return WAITING_AUDIO


async def receive_audio(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"[AUDIO] receive_audio –≤—ã–∑–≤–∞–Ω update={update}")

    file_id = None
    if update.message.voice:
        logger.info("[AUDIO] –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        file_id = update.message.voice.file_id
        ext = ".ogg"
    elif update.message.audio:
        logger.info("[AUDIO] –û–±–Ω–∞—Ä—É–∂–µ–Ω –∞—É–¥–∏–æ—Ñ–∞–π–ª")
        file_id = update.message.audio.file_id
        ext = ".mp3"
    else:
        logger.warning("[AUDIO] –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞—É–¥–∏–æ")
        await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å –∏–º–µ–Ω–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ –∏–ª–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª üéß")
        return WAITING_AUDIO

    file = await context.bot.get_file(file_id)
    filename = f"temp_{file_id}{ext}"
    await file.download_to_drive(filename)
    logger.info(f"[AUDIO] –°–∫–∞—á–∞–Ω —Ñ–∞–π–ª {filename}")

    try:
        if ext == ".ogg":
            wav_filename = ogg2wav(filename)
        else:
            # –µ—Å–ª–∏ mp3 -> –∫–æ–Ω–≤–µ—Ä—Ç–∏–º –≤ wav
            wav_filename = filename.replace(ext, ".wav")
            audio = AudioSegment.from_file(filename)
            audio.export(wav_filename, format="wav")

        text = recognize_speech(wav_filename)
        response = f"üé§ –í–æ—Ç —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:\n\n{text}"
        await update.message.reply_text(response)

    except Exception as e:
        logger.error(f"[AUDIO] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}", exc_info=True)
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∞—É–¥–∏–æ üò¢")

    finally:
        for f in (filename, locals().get("wav_filename")):
            if f and os.path.exists(f):
                os.remove(f)
                logger.info(f"[AUDIO] –§–∞–π–ª {f} —É–¥–∞–ª—ë–Ω")

    return ConversationHandler.END


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("[AUDIO] cancel –≤—ã–∑–≤–∞–Ω")
    await update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ ‚ùå")
    return ConversationHandler.END