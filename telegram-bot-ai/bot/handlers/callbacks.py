import os
from telegram import ReplyKeyboardMarkup, KeyboardButton, InputFile
from ..db import get_db_session, lectures
from ..services.drive_service import download_file
from ..services.ai_client import ask_ai
from .audio import cmd_make_summary  # ‚úÖ –¥–æ–±–∞–≤–ª–µ–Ω–æ

# —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–µ–Ω—é
MAIN_MENU = "main"
CHOOSING_TOPIC = "choosing_topic"
CHOOSING_LECTURE = "choosing_lecture"

# ------------------------
# –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard():
    return ReplyKeyboardMarkup(
        [
            [KeyboardButton("–õ–µ–∫—Ü–∏–æ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã")],
            [KeyboardButton("–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –Ω–µ–π—Ä–æ—Å–µ—Ç–∏")],
            [KeyboardButton("–°–¥–µ–ª–∞—Ç—å –∫—Ä–∞—Ç–∫–∏–π –∫–æ–Ω—Å–ø–µ–∫—Ç")]
        ],
        resize_keyboard=True
    )

def get_topics_keyboard():
    session = get_db_session()
    topics = session.query(lectures.c.topic).distinct().all()
    session.close()
    keyboard = [[KeyboardButton(topic[0])] for topic in topics]
    keyboard.append([KeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")])
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def get_lectures_keyboard(topic_name):
    session = get_db_session()
    lectures_list = session.query(lectures).filter(lectures.c.topic == topic_name).all()
    session.close()
    keyboard = [[KeyboardButton(lec.name)] for lec in lectures_list]
    keyboard.append([KeyboardButton("–ù–∞–∑–∞–¥ –∫ —Ç–µ–º–∞–º"), KeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")])
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def get_ai_keyboard():
    return ReplyKeyboardMarkup([[KeyboardButton("–í—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞")]], resize_keyboard=True)

# ------------------------
# –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–æ–≤
async def send_file(update, file_id, lecture_name, description, file_type="slides"):
    print(f"[send_file] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª {description} –¥–ª—è –ª–µ–∫—Ü–∏–∏ '{lecture_name}'")
    if not file_id:
        print(f"[send_file] ‚ùå –ù–µ—Ç {description} –¥–ª—è —ç—Ç–æ–π –ª–µ–∫—Ü–∏–∏")
        await update.message.reply_text(f"‚ùå –ù–µ—Ç {description} –¥–ª—è —ç—Ç–æ–π –ª–µ–∫—Ü–∏–∏.")
        return

    print(f"[send_file] –ù–∞—á–∞–ª–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è {description}, file_id={file_id}")
    file_path = download_file(file_id, lecture_name, file_type)
    if not file_path:
        print(f"[send_file] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å {description}")
        await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å {description}.")
        return

    print(f"[send_file] –°–∫–∞—á–∞–Ω–æ {file_path}, —Ä–∞–∑–º–µ—Ä: {os.path.getsize(file_path)/1024:.2f} KB")
    try:
        if file_type == "audio":
            print(f"[send_file] –û—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ: {lecture_name}.mp3")
            with open(file_path, "rb") as f:
                await update.message.reply_audio(audio=InputFile(f, filename=f"{lecture_name}.mp3"))
        elif file_type == "slides":
            print(f"[send_file] –û—Ç–ø—Ä–∞–≤–∫–∞ PDF: {lecture_name}.pdf")
            with open(file_path, "rb") as f:
                await update.message.reply_document(document=InputFile(f, filename=f"{lecture_name}.pdf"))
        else:
            print(f"[send_file] –û—Ç–ø—Ä–∞–≤–∫–∞ –±–∏–Ω–∞—Ä–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {lecture_name}")
            with open(file_path, "rb") as f:
                await update.message.reply_document(document=InputFile(f, filename=f"{lecture_name}.bin"))

        print(f"[send_file] –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {lecture_name}")
    except Exception as e:
        print(f"[send_file] ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {description}: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {description}: {e}")
    finally:
        if os.path.exists(file_path):
            os.remove(file_path)
            print(f"[send_file] –§–∞–π–ª —É–¥–∞–ª—ë–Ω –∏–∑ –ø–∞–º—è—Ç–∏: {file_path}")

# ------------------------
# –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
async def button_handler(update, context):
    user_id = update.effective_user.id
    text = update.message.text
    print(f"[button_handler] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–∫—Å—Ç: {text}")
    state = context.user_data.get("state", MAIN_MENU)

    # === –ß–ê–¢ –° –ù–ï–ô–†–û–°–ï–¢–¨–Æ ===
    if context.user_data.get("mode") == "ask_ai":
        print(f"[button_handler] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ AI")
        if text == "–í—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞":
            context.user_data["mode"] = None
            context.user_data["state"] = MAIN_MENU
            print(f"[button_handler] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã—à–µ–ª –∏–∑ —á–∞—Ç–∞ AI")
            await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_keyboard())
            return

        if "ai_history" not in context.user_data:
            context.user_data["ai_history"] = []

        context.user_data["ai_history"].append({"role": "user", "content": text})
        thinking_msg = await update.message.reply_text("–î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º... ü§ñ", reply_markup=get_ai_keyboard())

        try:
            prompt = "\n".join(f"{m['role']}: {m['content']}" for m in context.user_data["ai_history"])
            answer = ask_ai(prompt)
            print(f"[button_handler] AI –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {answer[:100]}...")
            context.user_data["ai_history"].append({"role": "assistant", "content": answer})
            await update.message.reply_text(answer, reply_markup=get_ai_keyboard())
        except Exception as e:
            print(f"[button_handler] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ AI: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò: {e}", reply_markup=get_ai_keyboard())
        finally:
            try:
                await thinking_msg.delete()
            except Exception:
                pass
        return

    # === –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ ===
    if state == MAIN_MENU:
        print(f"[button_handler] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é")
        if text == "–õ–µ–∫—Ü–∏–æ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã":
            context.user_data["state"] = CHOOSING_TOPIC
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:", reply_markup=get_topics_keyboard())
        elif text == "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –Ω–µ–π—Ä–æ—Å–µ—Ç–∏":
            context.user_data["mode"] = "ask_ai"
            context.user_data["ai_history"] = []
            await update.message.reply_text(
                "–¢—ã –≤–æ—à—ë–ª –≤ —á–∞—Ç —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é üß†.\n"
                "–ü–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥—Ä—è–¥ ‚Äî —è –±—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å.\n"
                "–ß—Ç–æ–±—ã –≤—ã–π—Ç–∏, –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É.",
                reply_markup=get_ai_keyboard()
            )
        elif text == "–°–¥–µ–ª–∞—Ç—å –∫—Ä–∞—Ç–∫–∏–π –∫–æ–Ω—Å–ø–µ–∫—Ç":
            print(f"[button_handler] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—É—Å—Ç–∏–ª –∞—É–¥–∏–æ-–∫–æ–Ω—Å–ø–µ–∫—Ç")
            return await cmd_make_summary(update, context)
        else:
            print(f"[button_handler] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—É—é –∫–æ–º–∞–Ω–¥—É")
            await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É üëá")
        return

    # === –í–´–ë–û–† –¢–ï–ú–´ ===
    if state == CHOOSING_TOPIC:
        print(f"[button_handler] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª —Ç–µ–º—É: {text}")
        if text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            context.user_data["state"] = MAIN_MENU
            await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_keyboard())
        else:
            context.user_data["state"] = CHOOSING_LECTURE
            context.user_data["topic_name"] = text
            await update.message.reply_text(
                f"–õ–µ–∫—Ü–∏–∏ –ø–æ —Ç–µ–º–µ '{text}':",
                reply_markup=get_lectures_keyboard(text)
            )
        return

    # === –í–´–ë–û–† –õ–ï–ö–¶–ò–ò ===
    if state == CHOOSING_LECTURE:
        print(f"[button_handler] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –ª–µ–∫—Ü–∏—é: {text}")
        if text == "–ù–∞–∑–∞–¥ –∫ —Ç–µ–º–∞–º":
            context.user_data["state"] = CHOOSING_TOPIC
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:", reply_markup=get_topics_keyboard())
        elif text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            context.user_data["state"] = MAIN_MENU
            await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_keyboard())
        else:
            topic_name = context.user_data.get("topic_name")
            print(f"[button_handler] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏—â–µ—Ç –ª–µ–∫—Ü–∏—é '{text}' –≤ —Ç–µ–º–µ '{topic_name}'")
            session = get_db_session()
            lec = session.query(lectures).filter(
                lectures.c.topic == topic_name,
                lectures.c.name == text
            ).first()
            session.close()

            if not lec:
                print(f"[button_handler] ‚ùå –õ–µ–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {text}")
                await update.message.reply_text("–õ–µ–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return

            if lec.drive_audio_id:
                print(f"[button_handler] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∞—É–¥–∏–æ {lec.name}")
                await send_file(update, lec.drive_audio_id, lec.name, "–∞—É–¥–∏–æ–∑–∞–ø–∏—Å—å", file_type="audio")
            if lec.drive_slides_id:
                print(f"[button_handler] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é {lec.name}")
                await send_file(update, lec.drive_slides_id, lec.name, "–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è", file_type="slides")
            if lec.summary_text:
                print(f"[button_handler] –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Å–ø–µ–∫—Ç–∞ –ª–µ–∫—Ü–∏–∏ {lec.name} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                await update.message.reply_text(f"üìù –ö–æ–Ω—Å–ø–µ–∫—Ç:\n{lec.summary_text}")