from ..db import get_db_session, lectures

# –î–ª—è AI
from ..services.ai_client import ask_ai

async def button_handler(update, context):
    text = update.message.text

    # –†–µ–∂–∏–º AI
    if context.user_data.get("mode") == "ask_ai":
        await update.message.reply_text("–î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º... ü§ñ")
        answer = ask_ai(text)
        await update.message.reply_text(answer)
        context.user_data["mode"] = None
        return

    # –õ–µ–∫—Ü–∏–∏
    if text == "–õ–µ–∫—Ü–∏–æ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã":
        await show_topics(update, context)
        return

    elif text == "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –Ω–µ–π—Ä–æ—Å–µ—Ç–∏":
        context.user_data["mode"] = "ask_ai"
        await update.message.reply_text("–ó–∞–¥–∞–π —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å üìù")
        return

    elif text == "–°–¥–µ–ª–∞—Ç—å –∫—Ä–∞—Ç–∫–∏–π –∫–æ–Ω—Å–ø–µ–∫—Ç":
        await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å –∞—É–¥–∏–æ, –∏ —è —Å–¥–µ–ª–∞—é –∫–æ–Ω—Å–ø–µ–∫—Ç üé§")
        return

    await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É üëá")


# ------------------------
# —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ç–µ–º –∏ –ª–µ–∫—Ü–∏–π —á–µ—Ä–µ–∑ ReplyKeyboard
async def show_topics(update, context):
    session = get_db_session()
    topics = session.query(lectures.c.topic).distinct().all()
    session.close()

    # —Å–æ–∑–¥–∞—ë–º ReplyKeyboard —Å —Ç–µ–º–∞–º–∏
    keyboard = [[topic[0]] for topic in topics]
    keyboard.append(["–ù–∞–∑–∞–¥"])
    markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:", reply_markup=markup)

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data["state"] = "choosing_topic"


async def show_lectures(update, context):
    topic_name = update.message.text
    session = get_db_session()
    lectures_list = session.query(lectures).filter(lectures.c.topic == topic_name).all()
    session.close()

    if not lectures_list:
        await update.message.reply_text("–õ–µ–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    keyboard = [[lec.name] for lec in lectures_list]
    keyboard.append(["–ù–∞–∑–∞–¥"])
    markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(f"–õ–µ–∫—Ü–∏–∏ –ø–æ —Ç–µ–º–µ '{topic_name}':", reply_markup=markup)

    context.user_data["state"] = "choosing_lecture"
    context.user_data["topic_name"] = topic_name


async def show_lecture_materials(update, context):
    lecture_name = update.message.text
    topic_name = context.user_data.get("topic_name")
    session = get_db_session()
    lec = session.query(lectures).filter(
        lectures.c.topic == topic_name, lectures.c.name == lecture_name
    ).first()
    session.close()

    if not lec:
        await update.message.reply_text("–õ–µ–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    text = f"–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –ª–µ–∫—Ü–∏–∏ '{lec.name}':\n"
    if lec.drive_audio_id:
        text += f"üéß –ê—É–¥–∏–æ–∑–∞–ø–∏—Å—å: https://drive.google.com/uc?id={lec.drive_audio_id}&export=download\n"
    if lec.drive_slides_id:
        text += f"üìÑ –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è: https://drive.google.com/uc?id={lec.drive_slides_id}&export=download\n"
    if lec.summary_text:
        text += f"üìù –ö–æ–Ω—Å–ø–µ–∫—Ç:\n{lec.summary_text}\n"

    await update.message.reply_text(text)

    # –ü–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–µ–Ω—é —Ç–µ–º
    await show_topics(update, context)


# ------------------------
# –û–±–Ω–æ–≤–ª—è–µ–º button_handler, —á—Ç–æ–±—ã –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –º–µ–∂–¥—É —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏
async def button_handler(update, context):
    text = update.message.text

    # –†–µ–∂–∏–º AI
    if context.user_data.get("mode") == "ask_ai":
        await update.message.reply_text("–î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º... ü§ñ")
        answer = ask_ai(text)
        await update.message.reply_text(answer)
        context.user_data["mode"] = None
        return

    state = context.user_data.get("state")
    if state == "choosing_topic":
        if text == "–ù–∞–∑–∞–¥":
            context.user_data["state"] = None
            return await start(update, context)
        await show_lectures(update, context)
        return
    elif state == "choosing_lecture":
        if text == "–ù–∞–∑–∞–¥":
            context.user_data["state"] = "choosing_topic"
            await show_topics(update, context)
            return
        await show_lecture_materials(update, context)
        return

    # –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
    if text == "–õ–µ–∫—Ü–∏–æ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã":
        await show_topics(update, context)
    elif text == "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –Ω–µ–π—Ä–æ—Å–µ—Ç–∏":
        context.user_data["mode"] = "ask_ai"
        await update.message.reply_text("–ó–∞–¥–∞–π —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å üìù")
    elif text == "–°–¥–µ–ª–∞—Ç—å –∫—Ä–∞—Ç–∫–∏–π –∫–æ–Ω—Å–ø–µ–∫—Ç":
        await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å –∞—É–¥–∏–æ, –∏ —è —Å–¥–µ–ª–∞—é –∫–æ–Ω—Å–ø–µ–∫—Ç üé§")
    else:
        await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É üëá")